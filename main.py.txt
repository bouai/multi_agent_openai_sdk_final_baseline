from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
from run_context import RunContext
from multi_agent_openai_sdk_near_final_baseline.master_agent import run_custom_master, run_default_master
from multi_agent_openai_sdk_near_final_baseline.config_flags.config_flags import USE_CUSTOM
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

@app.post("/run-agentic-task/")
async def run_agentic_task(request: Request):
    run_context = RunContext()
    run_context.log("Starting new run")
    try:
        goal = await request.json()
        if USE_CUSTOM:
            result = await run_custom_master(goal, run_context=run_context)
        else:
            result = await run_default_master(goal)
        return {"run_id": run_context.run_id, "result": result}
    except Exception as e:
        run_context.error(f"Exception during run: {e}")
        return JSONResponse(
            status_code=500,
            content={"run_id": run_context.run_id, "error": str(e)}
        )